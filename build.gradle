import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'scala'
apply plugin: 'maven'

group="org.asoem"
version="1.2.1"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.1'
    testCompile 'org.scalatest:scalatest_2.10:1.9.1', "junit:junit:4.11"
}

compileScala {
    compileScala.scalaCompileOptions.additionalParameters = ['-target:jvm-1.6 -feature']
}

compileTestScala {
    compileTestScala.scalaCompileOptions.additionalParameters = ['-target:jvm-1.6']
}

test << {
    ant.taskdef(name: 'scalatest', classname: 'org.scalatest.tools.ScalaTestAntTask', classpath: classpath.asPath)
    ant.scalatest(runpath: testClassesDir, haltonfailure: 'true', fork: 'false') {
        reporter(type: 'stderr')
    }
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:4.9'
    }
}

task standaloneProguard(type: proguard.gradle.ProGuardTask) {
    dependsOn jar
    ext.destFile = File.createTempFile('proguard', '.jar', temporaryDir)

    injars jar.archivePath
    configurations.runtime.each { file ->
        injars file.path, filter: '!META-INF/MANIFEST.MF'
    }
    outjars destFile.absolutePath
    libraryjars Os.isFamily(Os.FAMILY_MAC) ? '<java.home>/../Classes/classes.jar' : '<java.home>/lib/rt.jar'

    dontwarn 'scala.**'
    verbose
    dontobfuscate
    dontoptimize
    forceprocessing

    keep 'class * implements org.xml.sax.EntityResolver'

    keepclassmembers 'class * { \
        ** MODULE$; \
    }'

    keepparameternames
    renamesourcefileattribute 'SourceFile'
    keepattributes 'Exceptions,InnerClasses,Signature,Deprecated, \
    SourceFile,LineNumberTable,*Annotation*,EnclosingMethod'

    keep 'public class org.asoem.kdtree.* { \
        public protected *; \
    }'

    keepclassmembernames 'class scala.concurrent.forkjoin.ForkJoinPool { \
        long ctl; \
        long parkBlocker; \
    }'

    keepclassmembernames 'class scala.concurrent.forkjoin.ForkJoinPool$WorkQueue { \
        int runState; \
    }'

    keepclassmembernames 'class scala.concurrent.forkjoin.LinkedTransferQueue { \
        scala.concurrent.forkjoin.LinkedTransferQueue$Node head; \
        scala.concurrent.forkjoin.LinkedTransferQueue$Node tail; \
        int sweepVotes; \
    }'

    keepclassmembernames 'class scala.concurrent.forkjoin.LinkedTransferQueue$Node { \
        scala.concurrent.forkjoin.LinkedTransferQueue$Node next; \
        java.lang.Object item; \
        java.lang.Thread waiter; \
    }'

    // descriptor classes
    keep 'class scala.collection.concurrent.Gen'
    keep 'class scala.collection.concurrent.MainNode'
    keep 'class scala.Function0'
    keep 'class scala.Function1'
    keep 'class scala.collection.immutable.List'
    keep 'class scala.collection.Seq'
    keep 'class scala.Product2'
    keep 'class scala.collection.Traversable'
    keep 'class scala.runtime.ObjectRef'
    keep 'class scala.concurrent.Future'

    // keep scala conversion functions
    keep 'class scala.collection.JavaConversions'

    // keep only manifest of kdtree
}

configurations {
    standalone
}

task standaloneJar(type: Jar) {
    dependsOn standaloneProguard
    from zipTree(standaloneProguard.destFile)
    appendix "standalone"
}

artifacts {
    standalone standaloneJar
}